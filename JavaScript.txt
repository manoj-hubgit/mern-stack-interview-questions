1) What is JavaScript?
    • JavaScript is a high-level, versatile programming language 
    that is primarily used for creating interactive and dynamic content on websites. 
    • It's one of the core technologies of the web, along with HTML and CSS.
    • JavaScript enables developers to make web pages more dynamic and user-friendly by adding 
    interactivity, such as form validation, animations, and complex user interfaces.

2) What are JavaScript Data Types?
    Undefined
    Boolean
    number
    string
    object

3) Explain the difference between var, let, and const.
    • var: Function-scoped and can be re-declared and updated. Variables declared with var are hoisted to the top of their scope.
    • let: Block-scoped and can be updated but not re-declared within the same scope. It is not hoisted.
    • const: Block-scoped and cannot be updated or re-declared. 
    The value assigned to a const variable is immutable,
    but the object it refers to can still be modified.

4) What is hoisting in JavaScript?
    Hoisting is JavaScript's default behavior of moving declarations to the top of the current scope 
    (function or global) before code execution. 
    This means that variables and function declarations can be used before they are declared. 

5) Explain the difference between == and ===.
   • `==` : The loose equality operator that compares two values for equality 
    after converting both values to a common type.
   • `===`: The strict equality operator that compares two values for equality 
    without converting their types. It returns true only if the values and types are the same.   

6) What is the difference between null and undefined?
   • null: An assignment value that represents "no value" or "no object." 
     It is an intentional absence of any object value.
   • undefined: A variable that has been declared but has not been assigned a value. 
     It also represents the absence of value but is more about unintentional or unknown absence.

7) What is a Function in JavaScript?
    A function in JavaScript is a block of code designed to perform a particular task. 
    Functions are reusable and can be called anywhere in the code to execute the code block. 
    They can accept inputs (known as parameters), perform operations, and return outputs.

8) Types of Functions in JavaScript
    1. Named Functions
                These are functions that have a name when they are defined. 
                They are the most common type of functions.
    
    2. Anonymous Functions
                These are functions that do not have a name and are often used as arguments 
                to other functions or assigned to variables.

    3. Arrow Functions
                Arrow functions provide a more concise syntax for writing functions. 
                They are always anonymous and have a different behavior for this compared to 
                traditional functions.

    4. Immediately Invoked Function Expressions (IIFE)
                These are functions that are defined and immediately executed. 
                They are often used to create a new scope.

9) What is DOM ?
    The Document Object Model (DOM) in JavaScript is a programming interface for web documents. 
    It represents the structure of a web page in a tree-like format, 
    where each node corresponds to an element, attribute, or piece of text. 
    The DOM allows JavaScript to interact with and manipulate the content, structure, 
    and styling of a web page dynamically.

    Key Points about the DOM:
    
    • Tree Structure: The DOM represents a document as a tree of nodes, 
    where each node is an object representing a part of the document 
    (e.g., an element, an attribute, or a text node).
    
    • Manipulation: Through the DOM, JavaScript can modify the content, style, 
    and structure of a web page. This includes changing text, adding or removing elements,
    modifying attributes, etc.
    
    • Event Handling: The DOM allows JavaScript to respond to user interactions, 
    like clicks or keypresses, by handling events.
    
    • Cross-Platform: The DOM is a standard interface that is supported across different web browsers, 
    making it a fundamental part of web development.

10) What is Hoisting in JavaScript ?
     Hoisting is a JavaScript behavior where variable and function declerations are 
     moved to their top of theri containing scope uring the compilation phase, allowing them to use 
     before they are declared.

11) Promise in JavaScript 
     A Promise in JavaScript is an object that represents the eventual completion 
     (or failure) of an asynchronous operation and its resulting value. 
     Promises provide a way to handle asynchronous code in a more readable and maintainable manner, 
     avoiding the so-called "callback hell" that can occur when chaining multiple asynchronous 
     operations.

    Key Points of a Promise:
     States:
        Pending: The initial state, neither fulfilled nor rejected.
        Fulfilled: The operation completed successfully.
        Rejected: The operation failed.

     Handling:
        then(): Used to handle the result of a fulfilled promise.
        catch(): Used to handle errors or rejected promises.

12) What is async/await
     async and await are keywords in JavaScript that simplify working with Promises, 
    making asynchronous code easier to write and read. 
     They allow you to write asynchronous code in a way that looks synchronous, 
    improving readability and reducing complexity.

    async Keyword:
    • The async keyword is used to define an asynchronous function. 
    When a function is declared as async, it automatically returns a Promise, 
    even if it doesn’t explicitly return one.
    • Inside an async function, you can use the await keyword to pause the execution of the function 
    until a Promise is resolved or rejected.
    
    await Keyword:
    • The await keyword can only be used inside an async function.
    • It pauses the execution of the function until the Promise is resolved or rejected, 
    and returns the resolved value. If the Promise is rejected, await throws the error.

13) (MRF) map filter reduce in JavaScript
     Map, Reduce, Filter (MRF): This could refer to three commonly used array methods 
     in JavaScript—map, reduce, and filter. 
     These methods are often used for processing and transforming data within arrays.

    • map(): Creates a new array by applying a function to each element of the original array.
            const numbers = [1, 2, 3, 4];
            const doubled = numbers.map(x => x * 2); // [2, 4, 6, 8]

    • filter(): Creates a new array with all elements that pass the test implemented 
    by the provided function.
            const numbers = [1, 2, 3, 4];
            const evens = numbers.filter(x => x % 2 === 0); // [2, 4]

    • reduce(): Executes a reducer function on each element of the array, 
    resulting in a single output value.
            const numbers = [1, 2, 3, 4];
            const sum = numbers.reduce((acc, x) => acc + x, 0); // 10

14) What are the template litrals in JavaScript?
     Template litrals, denoted by backticks (`) are a way to create strings in JavaScript 
     that support interpolation of variables and multi line strings.

15) What is the callback function in JavaScript?
     A callback function in JavaScript is a function that is passed as an argument to another 
    function and is executed after some kind of event or operation. 
    Callbacks are used extensively in JavaScript to handle asynchronous operations such as 
    fetching data from a server, handling user interactions, 
    and executing code after a set period of time.

    Here are some key points about callback functions:

    1. Definition: 
        A callback is a function that is passed into another function as an argument, 
       which is then invoked inside the outer function to complete some kind of routine or action.

    2. Asynchronous Programming: 
        Callbacks are essential in JavaScript for managing asynchronous operations 
       like network requests, timers, or I/O operations. 
        Instead of waiting for an operation to complete, JavaScript can continue 
       executing the next code and "call back" the function once the operation is finished.

    3. Callback Hell: 
        Excessive use of nested callbacks can lead to "callback hell" or "pyramid of doom," 
       making code hard to read and maintain. 
        This can be mitigated by using modern features like Promises and async/await.

16) try catch in JavaScript
     The try...catch statement in JavaScript is used to handle exceptions, 
    allowing your program to manage errors gracefully without crashing.
     This construct enables you to write code that might throw an error and 
    then catch and handle the error if it occurs.

    • try: Contains the code that might throw an exception. If no exceptions are thrown, 
    the code within the catch block is ignored.

    • catch: Contains the code to handle exceptions that are thrown in the try block. 
    The catch block is executed only if an error is thrown. 
    It receives the error object as an argument, which can be used to get information about the error.

17) Fetch in JavaScript
     The fetch API in JavaScript is a modern interface for making network requests and 
    handling responses. 
     It provides a simpler and more flexible approach to asynchronous requests compared to the 
    older XMLHttpRequest (XHR) API. fetch returns a promise, 
    allowing you to handle requests and responses with .then() and .catch().

18) What is JSON.stringify()
     This method converts a JavaScript object or value to a JSON string. 
    It is useful when you want to send data to a web server or store it in a format 
    that can be easily retrieved and parsed later.

19) What is JSON.parse()
     This method parses a JSON string and converts it to a JavaScript object. 
     It is commonly used to convert data received from a web server in JSON format 
    to a JavaScript object.

20) Math.floor()
     Functionality: Rounds a number down to the nearest integer.
     Usage: Useful when you need to ensure the result is not greater than the original number.
        Examples
        Math.floor(4.7);  // Output: 4
        Math.floor(4.3);  // Output: 4
        Math.floor(-4.7); // Output: -5
        Math.floor(-4.3); // Output: -5

21) Math.round()
     Functionality: Rounds a number to the nearest integer. 
     If the fractional part of the number is 0.5 or greater, it rounds up; otherwise, it rounds down.
     Usage: Commonly used when the closest integer is needed.
        Examples
        Math.round(4.5);  // Output: 5
        Math.round(4.4);  // Output: 4
        Math.round(-4.5); // Output: -4
        Math.round(-4.6); // Output: -5

22) Math.ceil()
     Functionality: Rounds a number up to the nearest integer.
     Usage: Useful when you need to ensure the result is not less than the original number.
     Examples
     Math.ceil(4.3);  // Output: 5
     Math.ceil(4.7);  // Output: 5
     Math.ceil(-4.3); // Output: -4
     Math.ceil(-4.7); // Output: -4
